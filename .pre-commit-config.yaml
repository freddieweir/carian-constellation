# Pre-commit hooks for Carian Constellation
# Install: pip install pre-commit && pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # Terraform hooks
  - repo: https://github.com/antonbabenko/pre-commit-terraform
    rev: v1.83.5
    hooks:
      - id: terraform_fmt
        name: Terraform format
        description: Format Terraform files
        args:
          - --args=-recursive

      - id: terraform_validate
        name: Terraform validate
        description: Validate Terraform configuration
        args:
          - --args=-json
          - --hook-config=--retry-once-with-cleanup=true

      - id: terraform_docs
        name: Terraform docs
        description: Update Terraform documentation
        args:
          - --args=--output-file=README.md
          - --args=--output-mode=inject

      - id: terraform_tflint
        name: Terraform lint
        description: Lint Terraform with tflint
        args:
          - --args=--config=__GIT_WORKING_DIR__/.tflint.hcl

      - id: terraform_tfsec
        name: Terraform security scan
        description: Security scan with tfsec
        args:
          - --args=--exclude-downloaded-modules
          - --args=--format=default

  # YAML/Kubernetes validation
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-yaml
        name: Check YAML syntax
        args: ['--unsafe']  # Allow custom tags in Kubernetes YAML

      - id: end-of-file-fixer
        name: Fix end of files

      - id: trailing-whitespace
        name: Trim trailing whitespace

      - id: check-merge-conflict
        name: Check for merge conflicts

      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=500']

      - id: detect-private-key
        name: Detect private keys

      - id: check-case-conflict
        name: Check for case conflicts

  # Secret detection
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.0
    hooks:
      - id: gitleaks
        name: Detect secrets with gitleaks

  # Python hooks (for scripts)
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        name: Format Python code
        language_version: python3

  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        name: Lint Python code
        args: ['--max-line-length=120', '--extend-ignore=E203,W503']

  # Shell script validation
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Shellcheck bash scripts

  # Kubernetes-specific
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.4
    hooks:
      - id: insert-license
        name: Add license header
        files: \.(yaml|yml)$
        args:
          - --license-filepath
          - LICENSE_HEADER.txt
          - --comment-style
          - '#'
        exclude: ^\.github/

  # Custom local hooks
  - repo: local
    hooks:
      - id: check-terraform-tfvars
        name: Check for committed .tfvars files
        entry: bash -c 'if git diff --cached --name-only | grep -E "\.tfvars$" | grep -v "\.example$"; then echo "❌ .tfvars files should not be committed (use .tfvars.example)"; exit 1; fi'
        language: system
        pass_filenames: false
        always_run: true

      - id: check-aws-credentials
        name: Check for AWS credentials
        entry: bash -c 'if git diff --cached --name-only -z | xargs -0 grep -E "(AKIA|A3T[A-Z0-9]|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}"; then echo "❌ AWS credentials detected"; exit 1; fi'
        language: system
        pass_filenames: false
        always_run: true

      - id: check-kubernetes-secrets
        name: Check for inline Kubernetes secrets
        entry: bash -c 'if git diff --cached --name-only | grep -E "\.ya?ml$" | xargs grep -l "kind: Secret" | grep -v "ExternalSecret"; then echo "⚠️ Inline Kubernetes Secrets found - consider using External Secrets Operator"; fi'
        language: system
        pass_filenames: false
        always_run: true

      - id: validate-tagging
        name: Validate AWS resource tagging
        entry: bash -c 'git diff --cached --name-only | grep "\.tf$" | xargs grep -l "resource \"aws_" | while read f; do if ! grep -q "tags\s*=" "$f"; then echo "⚠️ $f missing tags"; fi; done'
        language: system
        pass_filenames: false
        always_run: true

      - id: check-cost-optimization
        name: Verify ephemeral resource tagging
        entry: bash -c 'git diff --cached --name-only | grep "ephemeral.*\.tf$" | xargs grep -l "resource \"aws_" | while read f; do if ! grep -q "Lifecycle.*=.*ephemeral" "$f"; then echo "⚠️ $f in ephemeral module should have Lifecycle=ephemeral tag"; fi; done'
        language: system
        pass_filenames: false
        always_run: true

# Configuration for individual tools
files: ''
exclude: |
  (?x)^(
      \.git/|
      \.terraform/|
      \.terragrunt-cache/|
      node_modules/|
      __pycache__/|
      \.pytest_cache/|
      \.venv/|
      venv/|
      dist/|
      build/|
      \.egg-info/
  )
