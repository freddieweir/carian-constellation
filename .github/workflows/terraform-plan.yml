name: üèóÔ∏è Terraform Plan

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'blueprints/terraform/**'
      - '.github/workflows/terraform-plan.yml'

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'

jobs:
  terraform-validate:
    name: Terraform Validate & Format Check
    runs-on: ubuntu-latest

    strategy:
      matrix:
        module:
          - bootstrap
          - ephemeral
          - persistent

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive blueprints/terraform/${{ matrix.module }}
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        cd blueprints/terraform/${{ matrix.module }}
        terraform init -backend=false

    - name: Terraform Validate
      id: validate
      run: |
        cd blueprints/terraform/${{ matrix.module }}
        terraform validate -no-color

    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Module: \`${{ matrix.module }}\`
          #### Format Check üñå\`${{ steps.fmt.outcome }}\`
          #### Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Validation ü§ñ\`${{ steps.validate.outcome }}\`

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate

    strategy:
      matrix:
        module:
          - bootstrap
          - ephemeral
          - persistent

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Create placeholder tfvars
      run: |
        cd blueprints/terraform/${{ matrix.module }}
        if [ -f "terraform.tfvars.example" ]; then
          # Create minimal tfvars for plan (will use defaults)
          echo "# Placeholder for CI/CD" > terraform.tfvars
          echo "# Actual values should be in AWS Secrets Manager" >> terraform.tfvars
        fi

    - name: Terraform Init (Local Backend)
      run: |
        cd blueprints/terraform/${{ matrix.module }}
        terraform init -backend=false

    - name: Terraform Plan (Syntax Only)
      run: |
        cd blueprints/terraform/${{ matrix.module }}
        # Plan without backend state to verify syntax
        terraform plan -no-color -input=false 2>&1 | tee plan.txt || true

    - name: Upload Plan Output
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ matrix.module }}
        path: blueprints/terraform/${{ matrix.module }}/plan.txt
        retention-days: 5

  tfsec-scan:
    name: TFSec Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: blueprints/terraform
        soft_fail: true
        format: sarif
        additional_args: --exclude-downloaded-modules

    - name: Upload SARIF (if enabled)
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.repository == github.event.repository.full_name
      with:
        sarif_file: results.sarif
      continue-on-error: true

  checkov-scan:
    name: Checkov Infrastructure Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: blueprints/terraform
        framework: terraform
        soft_fail: true
        output_format: sarif
        download_external_modules: false

    - name: Upload SARIF (if enabled)
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.repository == github.event.repository.full_name
      with:
        sarif_file: results.sarif
      continue-on-error: true

  terraform-docs:
    name: Terraform Documentation Check
    runs-on: ubuntu-latest

    strategy:
      matrix:
        module:
          - bootstrap
          - ephemeral
          - persistent

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for README.md
      run: |
        if [ ! -f "blueprints/terraform/${{ matrix.module }}/README.md" ]; then
          echo "‚ö†Ô∏è Missing README.md in ${{ matrix.module }} module"
          echo "Consider adding documentation with terraform-docs"
          exit 1
        fi
        echo "‚úÖ README.md exists for ${{ matrix.module }}"

    - name: Render terraform docs
      uses: terraform-docs/gh-actions@v1.0.0
      with:
        working-dir: blueprints/terraform/${{ matrix.module }}
        output-file: README.md
        output-method: inject
        git-push: false
