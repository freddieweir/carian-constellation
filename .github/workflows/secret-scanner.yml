name: üîê Secret Detection

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  gitleaks:
    name: GitLeaks Secret Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create GitLeaks config
      run: |
        cat > .gitleaks.toml << 'EOF'
        title = "Carian Constellation GitLeaks Config"

        [extend]
        useDefault = true

        [[rules]]
        description = "AWS Access Key ID"
        id = "aws-access-key-id"
        regex = '''(A3T[A-Z0-9]|AKIA|AGPA|AIDA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}'''

        [[rules]]
        description = "AWS Secret Access Key"
        id = "aws-secret-access-key"
        regex = '''(?i)aws(.{0,20})?['\"][0-9a-zA-Z\/+]{40}['\"]'''

        [[rules]]
        description = "AWS Session Token"
        id = "aws-session-token"
        regex = '''(?i)aws(.{0,20})?session(.{0,20})?token(.{0,20})?['\"][0-9a-zA-Z\/+]{100,}['\"]'''

        [[rules]]
        description = "Terraform AWS Provider Credentials"
        id = "terraform-aws-creds"
        regex = '''(?i)(access_key|secret_key)\s*=\s*["'][A-Za-z0-9/+=]{20,}["']'''

        [[rules]]
        description = "Private SSH Keys"
        id = "private-ssh-key"
        regex = '''-----BEGIN (RSA |OPENSSH |DSA |EC |PGP )?PRIVATE KEY-----'''

        [[rules]]
        description = "Kubernetes Secrets"
        id = "kubernetes-secret"
        regex = '''(?i)(kind:\s*Secret|type:\s*Opaque)'''

        [[rules]]
        description = "Base64 Encoded Secrets in K8s"
        id = "k8s-base64-secrets"
        regex = '''(?i)(data|stringData):[\s\S]{1,50}:\s*[A-Za-z0-9+/]{32,}={0,2}'''

        [[rules]]
        description = "Tailscale Auth Keys"
        id = "tailscale-auth-key"
        regex = '''tskey-auth-[a-zA-Z0-9]{32,}'''

        [[rules]]
        description = "YubiKey OTP Secrets"
        id = "yubikey-otp"
        regex = '''[cbdefghijklnrtuv]{32,44}'''

        [[rules]]
        description = "Domain-Specific Values"
        id = "domain-exposure"
        regex = '''(?i)(yourdomain\.com|example\.com)'''
        [[rules.allowlist]]
        description = "Allow template placeholders"
        regexes = [
            '''yourdomain\.com''',
            '''example\.com'''
        ]

        [allowlist]
        description = "Allowlist for false positives"
        regexes = [
            # Terraform variable references
            '''\$\{var\.[a-zA-Z_]+\}''',
            # Kubernetes secret references
            '''\{\{\s*\.Values\.[^}]+\}\}''',
            # AWS Secrets Manager references
            '''arn:aws:secretsmanager:[^:]+:[0-9]+:secret:''',
            # Environment variable references
            '''\$\{[A-Z_]+\}''',
            '''\$[A-Z_]+''',
            # Template domains
            '''yourdomain\.com''',
            '''example\.com''',
            # Terraform outputs and data sources
            '''data\.[a-z_]+\.[a-z_]+'''
        ]
        paths = [
            '''\.gitleaks\.toml''',
            '''\.github/workflows/.*''',
            '''.*\.tfvars\.example''',
            '''.*\.example''',
            '''.*\.template'''
        ]
        EOF

    - name: Run GitLeaks
      run: |
        # Install gitleaks using official release
        wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
        tar xzf gitleaks_8.18.0_linux_x64.tar.gz
        sudo mv gitleaks /usr/local/bin/

        # Run gitleaks on the current branch
        gitleaks detect --config=.gitleaks.toml --verbose --no-git --exit-code=1

  trufflehog:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.before || 'HEAD~1' }}
        head: ${{ github.sha }}
        extra_args: --debug --only-verified
      if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.event.before != '0000000000000000000000000000000000000000')

    - name: TruffleHog OSS (Full scan for new repository)
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --debug --only-verified
      if: github.event_name == 'push' && github.event.before == '0000000000000000000000000000000000000000'

  terraform-secrets:
    name: Terraform Secret Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for hardcoded credentials
      run: |
        echo "üîç Scanning for hardcoded credentials in Terraform..."

        # Check for .tfvars files that shouldn't be committed
        TRACKED_TFVARS=$(git ls-files "*.tfvars" 2>/dev/null | grep -v "\.example$" || true)

        if [ ! -z "$TRACKED_TFVARS" ]; then
          echo "‚ùå Found tracked .tfvars files (should be gitignored):"
          echo "$TRACKED_TFVARS"
          exit 1
        fi

        echo "‚úÖ No .tfvars files tracked in git"

        # Check for AWS credentials in terraform files
        if grep -r -E "access_key\s*=\s*\"AK" blueprints/terraform/ 2>/dev/null; then
          echo "‚ùå Found potential hardcoded AWS credentials"
          exit 1
        fi

        echo "‚úÖ No hardcoded AWS credentials found"

        # Check that secrets use proper references
        echo "üîç Validating secret references..."

        # Should use AWS Secrets Manager or External Secrets
        if grep -r "kind: Secret" blueprints/kubernetes/ 2>/dev/null | grep -v "ExternalSecret"; then
          echo "‚ö†Ô∏è Found Kubernetes Secrets - ensure using External Secrets Operator"
        fi

  kubernetes-secrets:
    name: Kubernetes Secret Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate ExternalSecret usage
      run: |
        echo "üîç Validating External Secrets configuration..."

        # Check if External Secrets are used
        EXTERNAL_SECRETS=$(find blueprints/kubernetes -name "*.yaml" -o -name "*.yml" | xargs grep -l "kind: ExternalSecret" || true)

        if [ -z "$EXTERNAL_SECRETS" ]; then
          echo "‚ö†Ô∏è No ExternalSecret resources found"
          echo "Consider using External Secrets Operator for sensitive data"
        else
          echo "‚úÖ Found ExternalSecret configurations"
          echo "$EXTERNAL_SECRETS" | while read -r secret_file; do
            echo "  - $secret_file"
          done
        fi

        # Check for inline secrets (bad practice)
        INLINE_SECRETS=$(find blueprints/kubernetes -name "*.yaml" -o -name "*.yml" | xargs grep -l "kind: Secret" | grep -v "ExternalSecret" || true)

        if [ ! -z "$INLINE_SECRETS" ]; then
          echo "‚ö†Ô∏è Found inline Secret resources (potential security issue):"
          echo "$INLINE_SECRETS"
          echo "Consider migrating to External Secrets Operator"
        fi

  aws-credentials:
    name: AWS Credentials Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for AWS credential patterns
      run: |
        echo "üîç Checking for AWS credential exposure..."

        # Check for AWS credential files
        if git ls-files | grep -E "(credentials|aws/config)$"; then
          echo "‚ùå AWS credential files found in repository"
          exit 1
        fi

        # Check for AWS profiles in code
        if grep -r -E "aws_access_key_id|aws_secret_access_key" . --exclude-dir=.git --exclude-dir=.github; then
          echo "‚ùå AWS credential patterns found in code"
          exit 1
        fi

        echo "‚úÖ No AWS credential files or patterns found"

        # Validate that terraform uses proper IAM roles
        if find blueprints/terraform -name "*.tf" | xargs grep -l "assume_role"; then
          echo "‚úÖ Terraform configured to use IAM role assumption"
        fi
