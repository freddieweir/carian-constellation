name: ☁️ AWS Security & Compliance

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'blueprints/terraform/**'
      - '.github/workflows/aws-security.yml'
  push:
    branches: [ main ]
    paths:
      - 'blueprints/terraform/**'

jobs:
  terraform-compliance:
    name: Terraform Compliance Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install terraform-compliance
      run: pip install terraform-compliance

    - name: Create compliance policies
      run: |
        mkdir -p compliance-policies

        # AWS Tagging Policy
        cat > compliance-policies/aws-tagging.feature << 'EOF'
        Feature: AWS Resource Tagging
          Scenario: All resources must have required tags
            Given I have resource that supports tags
            Then it must contain tags
            And it must contain Owner
            And it must contain Project
            And it must contain Environment
            And it must contain ManagedBy

          Scenario: Resources should have cost tracking tags
            Given I have resource that supports tags
            Then it should contain CostCenter
            Then it should contain Lifecycle
        EOF

        # Security Group Policy
        cat > compliance-policies/security-groups.feature << 'EOF'
        Feature: Security Group Configuration
          Scenario: Security groups must not allow unrestricted ingress
            Given I have aws_security_group defined
            When it contains ingress
            Then it must not have cidr_blocks
            Or it must not have cidr_blocks contain 0.0.0.0/0

          Scenario: Egress should be restricted
            Given I have aws_security_group defined
            When it contains egress
            Then it should not have cidr_blocks contain 0.0.0.0/0
        EOF

        # Encryption Policy
        cat > compliance-policies/encryption.feature << 'EOF'
        Feature: Encryption at Rest
          Scenario: EBS volumes must be encrypted
            Given I have aws_ebs_volume defined
            Then it must contain encrypted
            And its value must be true

          Scenario: S3 buckets must have encryption
            Given I have aws_s3_bucket defined
            Then it must contain server_side_encryption_configuration

          Scenario: RDS instances must be encrypted
            Given I have aws_db_instance defined
            Then it must contain storage_encrypted
            And its value must be true
        EOF

        # VPC Policy
        cat > compliance-policies/networking.feature << 'EOF'
        Feature: VPC Security
          Scenario: Subnets should not auto-assign public IPs
            Given I have aws_subnet defined
            When it contains map_public_ip_on_launch
            Then its value must be false

          Scenario: VPC flow logs should be enabled
            Given I have aws_vpc defined
            Then I have aws_flow_log defined
        EOF

        # EKS Security Policy
        cat > compliance-policies/eks-security.feature << 'EOF'
        Feature: EKS Cluster Security
          Scenario: EKS clusters must have private endpoints
            Given I have aws_eks_cluster defined
            Then it must contain vpc_config
            And it must contain endpoint_private_access
            And its value must be true

          Scenario: EKS clusters should have public access restricted
            Given I have aws_eks_cluster defined
            When it contains vpc_config
            Then it should contain endpoint_public_access
            And its value should be false
            Or it should contain public_access_cidrs
            And it should not contain 0.0.0.0/0

          Scenario: EKS clusters must have logging enabled
            Given I have aws_eks_cluster defined
            Then it must contain enabled_cluster_log_types
        EOF

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'

    - name: Run compliance checks
      run: |
        for module in bootstrap ephemeral persistent; do
          echo "🔍 Running compliance checks for $module..."

          cd blueprints/terraform/$module
          terraform init -backend=false
          terraform plan -out=plan.binary 2>/dev/null || true
          terraform show -json plan.binary > plan.json 2>/dev/null || true

          if [ -f plan.json ]; then
            terraform-compliance -p plan.json -f ../../../compliance-policies/ || echo "⚠️ Compliance issues in $module"
          fi

          cd ../../..
        done

  trivy-iac:
    name: Trivy Infrastructure Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy IaC scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: 'blueprints/terraform'
        format: 'sarif'
        output: 'trivy-iac.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.repository == github.event.repository.full_name
      with:
        sarif_file: trivy-iac.sarif
      continue-on-error: true

  cost-estimation:
    name: Terraform Cost Estimation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'

    - name: Estimate costs
      run: |
        echo "💰 Estimating infrastructure costs..."

        # Manual cost analysis based on known AWS pricing
        cat > cost-estimate.md << 'EOF'
        # Carian Constellation Cost Estimate

        ## Persistent Infrastructure (~$5.50/month)
        - Route53 Hosted Zone: $0.50/month
        - S3 Storage (5GB): $0.12/month
        - DynamoDB (on-demand): $0.25/month (estimated)
        - Secrets Manager (3 secrets): $1.20/month
        - KMS Keys: $3.00/month (3 keys)
        - Data Transfer: $0.43/month (estimated)

        ## Ephemeral Infrastructure ($0.25/hour when running)
        - EKS Control Plane: $0.10/hour
        - 2x t3.small workers: $0.0416/hour each = $0.0832/hour
        - 1x t3.micro Tailscale: $0.0104/hour
        - NAT Gateway: $0.045/hour
        - ALB: $0.0225/hour

        **Total Ephemeral**: ~$0.25/hour = $6.00/day if running 24 hours

        ## Usage Scenarios
        - Weekend use (16hrs/month): $5.50 + $4.00 = **$9.50/month**
        - Regular use (40hrs/month): $5.50 + $10.00 = **$15.50/month**
        - Always-on (720hrs/month): $5.50 + $180.00 = **$185.50/month**

        ## Optimization Opportunities
        - Use SPOT instances for 60-70% savings on compute
        - Reduce EKS to single t3.small node: -$0.0416/hour
        - Use AWS VPN instead of NAT Gateway: -$0.045/hour
        EOF

        cat cost-estimate.md

    - name: Upload cost estimate
      uses: actions/upload-artifact@v4
      with:
        name: cost-estimate
        path: cost-estimate.md
        retention-days: 30

  resource-limits:
    name: Resource Limit Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check resource configurations
      run: |
        echo "🔍 Validating resource limits and quotas..."

        # Check Kubernetes resource quotas
        if find blueprints/kubernetes -name "*quota*" -o -name "*resourcequota*" | grep -q .; then
          echo "✅ ResourceQuota definitions found"
          find blueprints/kubernetes -name "*quota*" -o -name "*resourcequota*" | while read -r quota_file; do
            echo "  - $quota_file"
            grep -E "(limits|requests)" "$quota_file" || true
          done
        else
          echo "⚠️ No ResourceQuota definitions found"
          echo "Consider adding quotas for cost control"
        fi

        # Check for PodDisruptionBudgets
        if find blueprints/kubernetes -name "*disruption*" | grep -q .; then
          echo "✅ PodDisruptionBudget definitions found"
        else
          echo "⚠️ No PodDisruptionBudget definitions found"
          echo "Consider adding PDBs for high availability"
        fi

  zero-trust-validation:
    name: Zero Trust Architecture Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate Zero Trust components
      run: |
        echo "🔐 Validating Zero Trust architecture..."

        # Check 1: Tailscale configuration
        echo "1️⃣ Checking Tailscale VPN configuration..."
        if grep -r "tailscale" blueprints/terraform/ --include="*.tf"; then
          echo "✅ Tailscale configuration found in Terraform"
        else
          echo "⚠️ No Tailscale configuration found"
        fi

        # Check 2: Private EKS endpoints
        echo "2️⃣ Checking EKS endpoint configuration..."
        if grep -r "endpoint_private_access.*=.*true" blueprints/terraform/ --include="*.tf"; then
          echo "✅ EKS private endpoint access enabled"
        else
          echo "⚠️ EKS private endpoint access not found"
        fi

        if grep -r "endpoint_public_access.*=.*false" blueprints/terraform/ --include="*.tf"; then
          echo "✅ EKS public endpoint access disabled"
        else
          echo "⚠️ EKS public endpoint still accessible"
        fi

        # Check 3: NetworkPolicies
        echo "3️⃣ Checking Kubernetes NetworkPolicies..."
        if find blueprints/kubernetes -name "*network-policy*" -o -name "*networkpolicy*" | grep -q .; then
          echo "✅ NetworkPolicy definitions found"
          POLICY_COUNT=$(find blueprints/kubernetes -name "*network-policy*" -o -name "*networkpolicy*" | wc -l)
          echo "  Found $POLICY_COUNT NetworkPolicy files"
        else
          echo "⚠️ No NetworkPolicy definitions found"
          echo "Consider adding NetworkPolicies for Zero Trust networking"
        fi

        # Check 4: External Secrets Operator
        echo "4️⃣ Checking External Secrets configuration..."
        if find blueprints/kubernetes -name "*.yaml" -o -name "*.yml" | xargs grep -l "ExternalSecret" 2>/dev/null | grep -q .; then
          echo "✅ External Secrets Operator in use"
        else
          echo "⚠️ External Secrets Operator not configured"
        fi

        # Check 5: Authelia/Authentication gateway
        echo "5️⃣ Checking authentication gateway..."
        if grep -ri "authelia" blueprints/; then
          echo "✅ Authelia authentication gateway configured"
        else
          echo "ℹ️ No authentication gateway found (may be configured separately)"
        fi

        # Generate Zero Trust report
        echo ""
        echo "📋 ZERO TRUST VALIDATION SUMMARY"
        echo "================================"
        echo "Zero Trust implementation checklist:"
        echo "- Network Layer (Tailscale VPN)"
        echo "- Infrastructure Layer (Private EKS, IAM MFA)"
        echo "- Application Layer (Authelia, WebAuthn)"
        echo "- Service Layer (NetworkPolicies, RBAC)"
        echo ""
        echo "Review findings above for compliance"
