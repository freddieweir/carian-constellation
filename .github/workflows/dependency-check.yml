name: üîç Dependency Security

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  terraform-dependencies:
    name: Terraform Provider Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'

    - name: Check provider versions
      run: |
        echo "üîç Checking Terraform provider versions..."

        for module in bootstrap ephemeral persistent; do
          echo "Checking $module module..."
          cd blueprints/terraform/$module

          if [ -f "versions.tf" ]; then
            echo "Provider constraints in $module:"
            grep -A 5 "required_providers" versions.tf || true
          fi

          cd ../../..
        done

    - name: Check for deprecated resources
      run: |
        echo "üîç Checking for deprecated Terraform resources..."

        # Check for deprecated AWS resources
        if grep -r "aws_instance" blueprints/terraform/ --include="*.tf" | grep -v "module" | grep -v "#"; then
          echo "‚ö†Ô∏è Found aws_instance resources - consider using aws_launch_template"
        fi

        # Check for deprecated security group rules
        if grep -r "aws_security_group_rule" blueprints/terraform/ --include="*.tf"; then
          echo "‚úÖ Using separate security group rules (good practice)"
        fi

  python-dependencies:
    name: Python Dependency Security
    runs-on: ubuntu-latest
    if: hashFiles('**/requirements.txt', '**/pyproject.toml') != ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi

        if [ -f "pyproject.toml" ]; then
          pip install -e .
        fi

    - name: Run pip-audit
      run: |
        pip install pip-audit
        pip-audit || true

    - name: Run safety check
      run: |
        pip install safety
        safety check || true

  container-security:
    name: Container Image Security
    runs-on: ubuntu-latest
    if: hashFiles('**/Dockerfile') != ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy for Dockerfiles
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-dockerfile.sarif'
        exit-code: '0'

    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.repository == github.event.repository.full_name
      with:
        sarif_file: trivy-dockerfile.sarif
      continue-on-error: true

  github-actions-security:
    name: GitHub Actions Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check action versions
      run: |
        echo "üîç Checking GitHub Actions versions..."

        # Find all workflow files
        find .github/workflows -name "*.yml" -o -name "*.yaml" | while read -r workflow; do
          echo "Checking $workflow..."

          # Check for pinned action versions
          UNPINNED=$(grep -E "uses:.*@(main|master|latest)" "$workflow" || true)

          if [ ! -z "$UNPINNED" ]; then
            echo "‚ö†Ô∏è Found unpinned action versions in $workflow:"
            echo "$UNPINNED"
            echo "Consider using commit SHAs for security"
          fi

          # Check for deprecated actions
          if grep -q "actions/checkout@v2" "$workflow"; then
            echo "‚ö†Ô∏è Using outdated checkout action version - update to v4"
          fi
        done

    - name: Run Actionlint
      run: |
        # Install actionlint
        bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
        ./actionlint -color || true

  aws-sdk-versions:
    name: AWS SDK Version Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check AWS provider version
      run: |
        echo "üîç Checking AWS provider versions across modules..."

        VERSIONS=$(grep -r "aws.*=.*{" blueprints/terraform/ -A 3 --include="*.tf" | grep "version" || true)

        if [ -z "$VERSIONS" ]; then
          echo "‚ö†Ô∏è No AWS provider version constraints found"
          echo "Consider pinning provider versions for consistency"
        else
          echo "Found AWS provider version constraints:"
          echo "$VERSIONS"
        fi

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for LICENSE file
      run: |
        if [ ! -f "LICENSE" ]; then
          echo "‚ö†Ô∏è No LICENSE file found"
          echo "Consider adding a license for clarity"
        else
          echo "‚úÖ LICENSE file exists"
          cat LICENSE
        fi

    - name: Check for license headers
      run: |
        echo "üîç Checking for license headers in source files..."

        # Check if any .tf files have license headers
        TF_WITH_HEADERS=$(find blueprints/terraform -name "*.tf" -exec grep -l "Copyright\|License" {} \; || true)

        if [ -z "$TF_WITH_HEADERS" ]; then
          echo "‚ÑπÔ∏è No license headers found in Terraform files (optional for internal projects)"
        else
          echo "‚úÖ Found license headers in Terraform files"
        fi

  sbom-generation:
    name: Software Bill of Materials
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate Terraform SBOM
      run: |
        echo "üìã Generating Software Bill of Materials..."

        cat > terraform-sbom.json << 'EOF'
        {
          "bomFormat": "CycloneDX",
          "specVersion": "1.4",
          "version": 1,
          "metadata": {
            "component": {
              "name": "carian-constellation",
              "type": "application",
              "description": "AWS EKS-based AI platform with ephemeral infrastructure"
            }
          },
          "components": []
        }
        EOF

        # Add Terraform modules and providers
        for module in bootstrap ephemeral persistent; do
          if [ -f "blueprints/terraform/$module/versions.tf" ]; then
            echo "Adding $module components to SBOM..."
          fi
        done

        echo "‚úÖ SBOM generated"

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: terraform-sbom.json
        retention-days: 90
